[{"content":"As promised in the previous blog post, we will now continue our journey into the world of many-body physics simulations with quantum computers. In this post, we want to address the question of how a particle such as an electron, propagates through an intrinsically quantum system, i.e., the 1-D quantum chain that we built previously. Remember everything we discussed so far has not taken into account disorder that is generally present in realistic condensed matter systems. Disorder is something that generically breaks some symmetries of the system Hamiltonian and/or leads to deviations from the lattice periodicity. When disorder is present, all the sites in a lattice are no longer equivalent. So another question naturally arises: how would disorder affect the quantum transport? The exploration of this general question has led to wonderful discoveries of various localization effects in disordered systems. Here we will touch on one of them, Anderson localization, which was first discovered by the great physicist Philip W. Anderson in 1958 [1]. One interesting thing to note is that the dimensionality of a system has a direct impact on Anderson localization. For example, according to the scaling theory of localization [2], in 1- and 2-D, a system will be a perfect insulator in the thermodynamic limit (simply put, when the system size is taken to infinity). Therefore, Anderson localization must happen in one- and two-dimensional disordered systems regardless of the disorder strength! However, in 3-D, Anderson localization is a critical phenomenon where the system undergoes a metal-insulator transition (MIT). This means that localization happens only when the disorder strength exceeds a certain threshold. Even though this is certainly one of the most interesting aspects of Anderson localization, we will not explore it here for the sake of simplicity. We will again stick to the 1-D system as in the previous post.\nQuantum random walk # Classical random walk is a random process that is prevalent in many phenomena in nature, such as the motion of macroscopic particles in liquids and gases known as Brownian motion and even the price of a fluctuating stock. In the most rudimentary version of a symmetric classical random walk on a lattice, at each time step, the probabilities of the particle jumping to any of the neighboring sites are the same. In 1-D, this means that the particle can move one site to the left or right with equal probability (50%) each time. A well-established result for a symmetric random walk is that in the continuous-time limit, the probability of finding the particle at time \\(t\\) at position \\(r\\) (from the origin) follows a Gaussian distribution:\n$$ P_\\text{classical}(r, t) = \\frac{1}{\\sqrt{2\\pi t}} e^{-r^2/2t}, $$\nwhere we have assumed the distance of each jump to be 1. Therefore, the standard deviation of this probability distribution scales as \\(\\sigma_\\text{classical}\\propto \\sqrt{t}\\). Since \\(\\langle r \\rangle = 0\\), this suggests that the mean-square-root displacement of the particle, which quantifies the spatial propagation of the particle relative to the origin, also scales diffusively with time as \\(\\sqrt{\\langle r^2\\rangle} \\propto \\sqrt{t}\\).\nSince we are interested in particle propagation in a quantum system, we will need to deal with quantum random walks instead. In this case, the intrinsic quantum nature including superposition and interferences among different wavefunctions will lead to a qualitative difference from the classical counterpart. Here is a somewhat intuitive way to think about the difference between them. Imagine a \u0026ldquo;classical walker\u0026rdquo; who decides whether to step left or right by tossing a coin with two possible outcomes \\(+\\) and \\(-\\), with probabilities \\(P_+\\) and \\(P_-\\), respectively. After each toss, they would look at the result and decide which way to go. So the classical random walk traces a single path within a decision tree. In contrast, a \u0026ldquo;quantum walker\u0026rdquo; flips their coin but never looks at the outcome. Instead, at each step, they step simultaneously to the left and right with some complex amplitudes \\(A_+\\) and \\(A_-\\) corresponding to probabilities \\(P_+ = \\lvert A_+\\rvert^2\\) and \\(P_- = \\lvert A_-\\rvert^2\\). After many iterations the quantum random walk results in an extended wavefunction of the quantum walker that spreads out to all positions in the tree with finite amplitudes. What\u0026rsquo;s more incredible is that these complex amplitudes at different sites add up for any given path and depending on the phase differences, this creates constructive or destructive interferences when measuring the probabilities at the end. A diagram illustrating the ideas above is shown below (taken from [3]).\nDue to the critical differences highlighted above, it can be shown that a symmetric quantum random walk in the continuous-time limit will lead to a probability distribution that follows a Bessel function of the first kind [4]:\n$$ P_\\text{quantum}(r, t) = \\lvert J_r(2t) \\rvert^2. $$\nBelow is a visualization of the two probability distributions for continuous-time classical and quantum random walks:\nMoreover, a quantum random walk exhibits ballistic propagation with the mean-square-root displacement scaling linearly with time, \\(\\sqrt{\\langle r^2\\rangle} \\propto t\\). The quadratic speed-up of quantum random walks versus classical random walks is analogous to the quadratic speed-up of the Grover search algorithm compared to a classical search!\nSimulating a quantum random walk # Let us now simulate the quantum random walk on a 1-D tight-binding chain to see if the result matches the theory prediction above. We will first do this on a simulator and then on a real quantum computer. For this simulation, we consider a 5-site tight-binding lattice whose Hamiltonian is given by\n$$ H_\\text{tb}/\\hbar = J\\sum_{i=0}^3(X_i X_{i+1} + Y_i Y_{i+1}). $$\nAgain, we have set the on-site potentials to be zero to simulate a clean system without disorder and will use \\(J = 1\\) from here onwards [cf. Eq. (2) in part I]. Recall that to simulate the dynamics of a quantum system on a gate-based quantum computer, we employ the Trotterization process to discretize the continuous time evolution. Therefore, we use the Trot_qc function established in part I to build the Trotterized quantum circuit for this 5-site system at any given time. Next, we want to add a particle in the form of an excitation to site 0, i.e., qubit 0. This is done by apply an \\(X\\) gate to flip the qubit from \\(\\ket{0}\\) state to \\(\\ket{1}\\) state. We modify the U_trot_tb function in the previous part slightly to record the Trotterized circuits at all Trotter (time) steps over a given simulation time:\ndef U_trot_circuits(delta_t, trotter_steps, num_qubits): \u0026#34;\u0026#34;\u0026#34; Record a list of Trotterized circuits at all Trotter steps separated by delta_t. Args: delta_t (float): Duration of individual time steps. trotter_steps (array): Array of intermediate time steps. num_qubits (int): The total number of qubits. Returns: circuits (list): A list of Trotterized quantum circuits. \u0026#34;\u0026#34;\u0026#34; t = Parameter(\u0026#34;t\u0026#34;) circuits = [] for n_steps in trotter_steps: qr = QuantumRegister(num_qubits) cr = ClassicalRegister(num_qubits) qc = QuantumCircuit(qr, cr) qc.x(0) # Add an excitation to site 0 for _ in range(n_steps): qc.append(Trot_qc(num_qubits, t).to_instruction(), qr) qc = qc.bind_parameters({t: delta_t}) circuits.append(qc) return circuits We can now track the propagation of the particle by keeping track of the probability of finding it on each qubit at different time steps. To simulate this process with a simulator, we will make use of the statevector_simulator backend in Qiskit\u0026rsquo;s Aer module. For this, we make some additional imports here.\nfrom qiskit import transpile, Aer, IBMQ, execute from copy import deepcopy Here we define a function that extracts the probabilities of each qubit being in the \\(\\ket{1}\\) state at different times using the output state from the statevector_simulator.\ndef probability_density(delta_t, trotter_steps, num_qubits): \u0026#34;\u0026#34;\u0026#34; Calculate the probabilities of finding the excitation on each qubit at different time steps. Args: delta_t (float): Duration of individual time steps. trotter_steps (array): Array of intermediate times. num_qubits (int): The total number of qubits. Returns: probability_density (array): The probability density of the excitation at all Trotter steps. \u0026#34;\u0026#34;\u0026#34; backend_sim = Aer.get_backend(\u0026#39;statevector_simulator\u0026#39;) circuits = U_trot_circuits(delta_t, trotter_steps, num_qubits) probability_density=[] for circ in circuits: transpiled_circ=transpile(circ, backend_sim, optimization_level=3) job_sim = backend_sim.run(transpiled_circ) # Grab the results from the job. result_sim = job_sim.result() outputstate = result_sim.get_statevector(transpiled_circ, decimals=5) ps = [] # Extract the probability of finding the excitation on each qubit. # (e.g. for 5 qubits, we need \u0026#34;00001\u0026#34;, \u0026#34;00010\u0026#34;, \u0026#34;00100\u0026#34;, \u0026#34;01000\u0026#34;, \u0026#34;10000\u0026#34;) for i in range(num_qubits): ps.append(np.abs(outputstate[2**i])**2) probability_density.append(ps) probability_density = np.array(probability_density) return probability_density It\u0026rsquo;s time to simulate the quantum random walk on the 5-site tight-binding lattice and see the results. We choose to evolve the system over 25 steps with a step size of 0.15 for this simulation. We can visualize the results by running the following code,\ndelta_t = 0.15 trotter_steps = np.arange(1, 25, 1) num_qubits = 5 prob_density = probability_density(delta_t, trotter_steps, num_qubits) prob_max, prob_min = np.max(prob_density), np.min(prob_density) plt.figure(figsize=(5,5), facecolor=\u0026#39;white\u0026#39;) plt.pcolormesh(np.arange(0, num_qubits,1), trotter_steps*delta_t, prob_density, vmin=prob_min, vmax=prob_max) plt.colorbar() plt.xlabel(\u0026#39;Qubit index\u0026#39;) plt.ylabel(\u0026#39;Time (1/J)\u0026#39;) plt.savefig(\u0026#34;probs_qwr.svg\u0026#34;) which produces the plot below:\nThis result is pretty nice as it shows that the particle excitation traverses the lattice and eventually reflects off the opposite end of the 1-D chain. In principle, the quantum random walk propagates in both directions for all the interim sites. However, quantum interferences among these multiple trajectories alter the particle wavepacket as it evolves in time, leading to the unidirectional transport seen above. Furthermore, it is evident that the displacement of the excitation scales linearly with time, agreeing well with the prediction of quantum random walks.\nPerforming the same simulation on a real quantum computer is slightly different. Here we can no longer retrieve the statevectors directly from the outputs. Instead, at each time step we will need to send the circuit to the quantum computer many times (specified by the number of shots) for execution and extract the probabilities based on the output statistics. During the Challenge, we were given the access to one of IBM\u0026rsquo;s 7-qubit systems ibm_nairobi. We can perform the simulation by calling the following function:\ndef probability_density_exp(delta_t, trotter_steps, num_qubits, shots): # Load your IBM Quantum account IBMQ.load_account() # Get the backend provider = IBMQ.get_provider(hub=\u0026lt;hub_name\u0026gt;, group=\u0026lt;group_name\u0026gt;, project=\u0026lt;project_name\u0026gt;) backend = provider.get_backend(\u0026#39;ibm_nairobi\u0026#39;) # Create transpiled circuits for hardware execution initial_layout = [0 , 1 , 3 , 5 , 4] # Specific to ibm_nairobi topology hardware_transpiled_circuits = [] for circ in U_trot_circuits(delta_t, trotter_steps, num_qubits): hardware_circ = deepcopy(circ) hardware_circ.measure(range(num_qubits), range(num_qubits)) hardware_transpiled_circuits.append( transpile(hardware_circ, backend, initial_layout=initial_layout, optimization_level=3) ) # Run the circuits job = execute(hardware_transpiled_circuits, backend=backend, shots=shots) exp_results = job.result() probability_density_exp = [] for output in exp_results.get_counts(): ps = [] # Extract the probabilities keys = [\u0026#39;00001\u0026#39;, \u0026#39;00010\u0026#39;, \u0026#39;00100\u0026#39;, \u0026#39;01000\u0026#39;, \u0026#39;10000\u0026#39;] for key in keys: if key in output: ps.append(output[key]/shots) else: ps.append(0.) probability_density_exp.append(ps) return probability_density_exp Below is the result for one of the simulations on the hardware.\nComparing this with the result above from the simulator, despite the similarity, the effect of noise and decoherence (especially at later times) on a real quantum hardware is apparent!\nAnderson localization # Finally, we are coming to Anderson localization. As mentioned before, Anderson localization always happens in 1-D systems when disorder is present. Lattice inhomogeneity causes scattering and leads to quantum interference that tends to inhibit particle propagation, a signature of localization. The wavefunction of a localized particle rapidly decays away from its initial position, effectively confining the particle to a small region of the lattice. This localization phenomenon is a direct consequence of interference between different paths arising from multiple scatterings of the electron by lattice defects. To study this phenomenon, we add back the inhomogeneous on-site potentials to the Hamiltonian, thereby making the lattice sites inequivalent, i.e.,\n$$ H_\\text{tb}/\\hbar = J\\sum_{i=0}^3(X_i X_{i+1} + Y_i Y_{i+1}) + \\sum_{i=0}^3\\epsilon_i Z_i. $$\nOne simple way to model disorder within the tight-binding system is through the Aubry-Andre (AA) model, where the disorder is replaced by a periodic modulation of the on-site energies, with a spatial period incommensurate with the lattice period. The AA potential is modeled as \\(\\epsilon_i = W\\cos(2\\pi\\beta i)\\), where \\(\\beta\\) determines the quasicrystal periodicity and \\(W\\) is the disorder strength. Moreover, with the addition of the on-site terms, we also need to modify the Trotterized circuit. Note that exponentiating the \\(Z_i\\) gates for the time-evolution unitary simply leads to \\(R_{Z_i}\\) gates acting on individual qubits. So we can define a Trot_qc_disorder circuit based on the Trot_qc circuit from part 1:\ndef U_trot_circuits_disorder(delta_t, trotter_steps, num_qubits, W, beta): \u0026#34;\u0026#34;\u0026#34; Record a list of Trotterized quantum circuits with disorder at all Trotter steps. Args: delta_t (float): Duration of individual time steps. trotter_steps (array): Array of intermediate times. num_qubits (int): The total number of qubits. W (float): The disorder strength. beta (float): The quasicrystal periodicity of the AA model. Returns: disorder_circuits (list): List of Trotterized quantum circuits with disorder. \u0026#34;\u0026#34;\u0026#34; t = Parameter(\u0026#39;t\u0026#39;) deltas = [Parameter(\u0026#39;delta_{:d}\u0026#39;.format(idx)) for idx in range(num_qubits)] AA_pattern = np.cos(2*np.pi*beta*np.arange(num_qubits)) disorders = W * AA_pattern disorder_circuits = [] for n_steps in trotter_steps: qr = QuantumRegister(num_qubits) cr = ClassicalRegister(num_qubits) qc = QuantumCircuit(qr, cr) qc.x(0) for _ in range(n_steps): qc.append(Trot_qc_disorder(num_qubits, t, deltas), qr) qc = qc.bind_parameters({t: delta_t}) qc = qc.bind_parameters({deltas[idx]: disorders[idx] for idx in range(num_qubits)}) disorder_circuits.append(qc) return disorder_circuits Like in the previous section, we will simulate the particle propagation with disorder on a simulator. Here is how it looks like:\nComparing with the quantum random walk result, it is clear that in the presence of the AA disorder, the particle tends to be localized in its initial position (qubit 0) as time evolves. So we successfully see the effect of Anderson localization in this 1-D system! Again, running the same simulation on a quantum computer we see a degradation in quality of the results due to noise, but we can still reach the same conclusion in this case:\nConclusion # It\u0026rsquo;s been a long post to get to this point, but just to conclude, we have successfully simulated the particle propagation in a 1-D quantum chain with and without disorder on both a simulator and a real quantum computer provided by IBM. In the case of no disorder, we saw behaviors of a quantum random walk, while is distinct from a classical random walk. In the presence of disorder, we saw the effect of Anderson localization, i.e., the particle tends to localize in its initial position over time. In the next and final post of this series, we will look into a more complex example of localization beyond the single-particle picture we have been adhering to so far, that is, many-body localization. The question there is: does localization still happen when we take into account particle interactions? See you in the next one!\nReferences: # [1] P. W. Anderson, Absence of Diffusion in Certain Random Lattices. Phys. Rev. 109, 1492 (1958).\n[2] E. Abrahams, P. W. Anderson, D. C. Licciardello, and T. V. Ramakrishnan, Scaling Theory of Localization: Absence of Quantum Diffusion in Two Dimensions. Phys. Rev. Lett. 42, 673 (1979).\n[3] K. Manouchehri and J. B. Wang, Solid State Implementation of Quantum Random Walks on General Graphs. AIP Conf. Proc. 1074, 56 (2008).\n[4] J.Kempe, Quantum random walks - an introductory overview. arXiv:quant-ph/0303081 (2003).\n","date":"June 18, 2022","permalink":"/blog/ibm-spring-challenge-2/","section":"Blog","summary":"As promised in the previous blog post, we will now continue our journey into the world of many-body physics simulations with quantum computers.","title":"Quantum simulation of many-body physics - II"},{"content":"A few weeks ago I participated in the IBM Quantum Spring Challenge 2022, which was a fun challenge to do because one of the topics covered is actually close to my heart, which is on quantum simulations of many-body systems in condensed matter physics. In these problems, we investigated a well-known phenomenon (to the condensed matter physics community, of course) called Anderson localization and one called many-body localization, which I happened to gain some exposure to during the MAGLAB Theory Winter School earlier this year and is still an active topic of research. The majority of this Challenge was about introducing and reproducing some of the results from this nicely written quantum transport paper by Karamlou et al. I will split the full discussion into three parts. This blog post will cover the first part, where we will set up the framework for investigating many-body physics on a quantum computer. This includes building the tight-binding model for a 1-D quantum chain and using Trotterization for simulating dynamics of the quantum states.\nThe other topic of the Quantum Challenge was quantum chemistry calculations with the variational quantum eigensolver (VQE), which I do not intend to discuss this time. Interested readers are encouraged to take a look at the original announcement linked above for more details. Here is the official Github repository if you want to have a go at the challenge problems. Without further ado, let us begin our discussion.\nTight-binding model of a quantum chain # The tight-binding model would be the building block for studying the many-body physics that will be discussed throughout this post. In layman\u0026rsquo;s terms, the tight-binding model describes a solid-state system where most electrons are \u0026ldquo;tightly bound\u0026rdquo; to their nuclei, which sit at the fixed lattice sites. Only a few valence electrons are loosely bound and therefore can \u0026ldquo;hop\u0026rdquo; to the neighboring sites. This hopping action is what leads to an extended Bloch wavefunction, which is the electron wavefunction in the presence of a period lattice potential. The most common way of writing a (spinless) tight-binding model in condensed matter physics would be in the second-quantization form:\n\\begin{equation} H_\\text{tb}/\\hbar = \\sum_{i}\\epsilon_{i} c_i^\\dagger c_i + \\sum_{\\langle i,j\\rangle}J_{ij}\\left( c_i^\\dagger c_j + \\text{h.c.}\\right), \\end{equation}\nwhere \\(c_i^\\dagger\\) and \\(c_i\\) are the creation and annihilation operators for the electron at site \\(i\\), respectively, \\(\\mu_i\\) are the on-site potentials, and \\(J_{ij}\\) are the elements of a symmetric matrix representing the hopping strengths. Moreover, \\(\\langle i,j\\rangle\\) denotes any pair of neighboring sites. To simulate this fermionic system on a gate-based quantum computer which is built on qubits, we need a similar notion for the ladder operators (i.e., creation and annihilation operators) for two-level systems: \\(c^\\dagger \\ket{0} \\to \\ket{1}\\) and \\(c\\ket{1} \\to \\ket{0}\\). One way of representing them would be to use the Pauli gates:\n$$ \\begin{split} \u0026amp; c_i^\\dagger = \\frac{1}{\\sqrt 2}(X_i + iY_i), \\\\ \u0026amp; c_i = \\frac{1}{\\sqrt 2}(X_i - iY_i). \\end{split} $$\nPlugging them into Eq. (1) and assuming the hoppings are homogeneous such that they can be described by a single parameter \\(J\\), we obtain\n\\begin{equation} H_\\text{tb}/\\hbar = \\sum_i \\epsilon_i Z_i + J\\sum_{\\langle i,j\\rangle}(X_i X_j + Y_i Y_j), \\end{equation} where we have neglected a constant term (proportional to the identity operator) that would not have any impact on the dynamics of the system.\nTrotterization # One of the things we care about in quantum simulations is the time-evolution of the quantum system. This is determined by the unitary operator \\(e^{-iHt/\\hbar}\\) in quantum mechanics, where \\(H\\) is the time-independent Hamiltonian, which is \\(H_\\text{tb}\\) in the case of our 1-D quantum chain. Now, to execute the time evolution unitary on a gate-based quantum computer, one must decompose it into a product of one- and two-qubit gates that can be implemented on the quantum computer. One method to accomplish this is called Trotterization, which essentially performs a discretized approximation to the continuous time evolution. To demonstrate it, let us consider a simple three-site system. The time-evolution unitary of this system is given by $$ \\begin{split} U_\\text{tb}(t) \u0026amp;= \\exp\\left[\\frac{-it}{\\hbar}\\left(H_\\text{tb}^{(0,1)} + H_\\text{tb}^{(1,2)}\\right)\\right] \\\\ \u0026amp;\\approx \\left[\\exp\\left(\\frac{-it}{n\\hbar}H_\\text{tb}^{(0,1)}\\right) \\exp\\left(\\frac{-it}{n\\hbar}H_\\text{tb}^{(1,2)}\\right) \\right]^n, \\end{split} $$ where in the second step we have applied Trotterization and \\(n\\) is the number of Trotter steps, i.e., discrete time steps. Within each two-site subsystem, the Pauli operator pairs \\(X_i X_j\\) and \\(Y_i Y_j\\) commute with each other. Therefore, with \\(J = 1\\) and \\(\\epsilon_i = 0\\), we can write \\(U_\\text{tb}(t)\\) as $$ \\begin{split} U_\\text{tb}(t) \u0026amp;\\approx \\left\\{\\exp\\left[\\frac{-it}{n} \\left(X_0 X_1 + Y_0 Y_1 \\right) \\right] \\exp\\left[\\frac{-it}{n}\\left(X_1 X_2 + Y_1 Y_2 \\right) \\right] \\right\\}^n \\\\ \u0026amp;= \\left[\\exp\\left(\\frac{-it}{n}X_0 X_1\\right) \\exp\\left(\\frac{-it}{n}Y_0 Y_1\\right) \\exp\\left(\\frac{-it}{n}X_1 X_2\\right) \\exp\\left(\\frac{-it}{n}Y_1 Y_2\\right) \\right]^n \\\\ \u0026amp;= \\left[R_{X_0X_1}\\left(\\frac{2t}{n} \\right) R_{Y_0Y_1}\\left(\\frac{2t}{n} \\right) R_{X_1X_2}\\left(\\frac{2t}{n} \\right) R_{Y_1Y_2}\\left(\\frac{2t}{n} \\right) \\right]^n, \\end{split} $$ where \\(R_{X_iX_j}\\) and \\(R_{Y_iY_j}\\) are parametric two-qubit \\(X\\otimes X\\) and \\(Y\\otimes Y\\) interaction gates between qubits \\(i\\) and \\(j\\). They are sometimes referred to as the Ising gates. Please see RXXGate and RYYGate for more details. In general, for an \\(n\\)-qubit system, the time-evolution unitary can be written as $$ U_\\text{tb}(\\Delta t) \\approx \\prod_{j\\in\\text{odd}} R_{X_j X_{j+1}}(2\\Delta t) R_{Y_j Y_{j+1}}(2\\Delta t) \\prod_{k\\in\\text{even}} R_{X_k X_{k+1}}(2\\Delta t) R_{Y_k Y_{k+1}}(2\\Delta t), $$ where \\(\\Delta t = t/n\\) is the discretized time step.\nWe are now just one step shy of implementing \\(U_\\text{tb}(t)\\) on a quantum computer, that is, to further decompose the \\(R_{XX}\\) and \\(R_{YY}\\) gates into a set of gates that are native to the quantum hardware, such as the CNOT gate and single-qubit rotation gates. For this, let us introduce another Ising gate, RZZGate \\(R_{ZZ}\\). It is not hard to verify that this two-qubit gate can be decomposed as a single-qubit rotation gate \\(R_Z = \\exp(-i\\theta Z/2)\\) sandwiched between two CNOT gates. Specifically, \\(R_{ZZ}(\\theta) = \\text{CNOT}\\, R_Z(\\theta)\\, \\text{CNOT}\\). Then by working out the explicit matrix representations, one can show that the \\(R_{XX}\\) gate has the following decomposition,\nwhile the \\(R_{YY}\\) gate is decomposed as\nWith the above setup, we are ready to build the Trotterized quantum circuit for a general \\(n\\)-site quantum chain using Qiskit. First, we need to import some necessary packages.\nimport numpy as np import matplotlib.pyplot as plt from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister from qiskit.circuit import Parameter import qiskit.quantum_info as qi We then define the Trot_qc function for the Trotterized quantum circuit.\ndef Trot_qc(num_qubits, t=Parameter(\u0026#34;t\u0026#34;)): \u0026#34;\u0026#34;\u0026#34; Creates the Trotterized quantum circuit at a given time for the 1D tight-binding model. Args: num_qubits (int): The number of qubits in the circuit. t (Parameter): time. Returns: qiskit.circuit.QuantumCircuit: The Trotterized quantum circuit. \u0026#34;\u0026#34;\u0026#34; def ZZ_gate(t): ZZ_qr = QuantumRegister(2) ZZ_qc = QuantumCircuit(ZZ_qr, name=\u0026#39;ZZ\u0026#39;) ZZ_qc.cnot(0,1) ZZ_qc.rz(2 * t, 1) ZZ_qc.cnot(0,1) # Convert custom quantum circuit into a gate ZZ = ZZ_qc.to_instruction() return ZZ def XX_gate(t): XX_qr = QuantumRegister(2) XX_qc = QuantumCircuit(XX_qr, name=\u0026#39;XX\u0026#39;) XX_qc.ry(np.pi/2, [0,1]) XX_qc.append(ZZ_gate(t), [0,1]) XX_qc.ry(-np.pi/2, [0,1]) XX = XX_qc.to_instruction() return XX def YY_gate(t): YY_qr = QuantumRegister(2) YY_qc = QuantumCircuit(YY_qr, name=\u0026#39;YY\u0026#39;) YY_qc.rx(-np.pi/2, [0,1]) YY_qc.append(ZZ_gate(t), [0,1]) YY_qc.rx(np.pi/2, [0,1]) YY = YY_qc.to_instruction() return YY Trot_qr = QuantumRegister(num_qubits) qc = QuantumCircuit(Trot_qr, name=\u0026#39;Trot\u0026#39;) for i in range(num_qubits - 1): qc.append(XX_gate(t), [Trot_qr[i], Trot_qr[i+1]]) qc.append(YY_gate(t), [Trot_qr[i], Trot_qr[i+1]]) return qc We can inspect the circuit for 3 qubits by calling the QuantumCircuit.draw() method:\nLast but not least, to see if we have implemented Trotterization correctly, we may compute the process fidelity between the Trotterized quantum channel and the exact time-evolution unitary. We define the exact time-evolution unitary as follows:\nfrom qiskit.opflow import I, X, Y, Z def U_tb(t): \u0026#34;\u0026#34;\u0026#34; Exact time-evolution unitary for 3 qubits. \u0026#34;\u0026#34;\u0026#34; # Interactions (I is the identity matrix; X and Y are Pauli matricies; # ^ is a tensor product) XXs = (I^X^X) + (X^X^I) YYs = (I^Y^Y) + (Y^Y^I) H_tb = XXs + YYs return (t * H_tb).exp_i() On the other hand, the approximate unitary based on Trotterization is constructed as follows:\ndef U_trot_tb(t_target, trotter_steps, num_qubits): \u0026#34;\u0026#34;\u0026#34; Creates the Trotterized time-evolution unitary for a 1-D tight-binding model. Args: t_target (float): The total time evolved. trotter_steps (int): The number of Trotter steps. num_qubits (int): The number of qubits in the circuit. Returns: qiskit.quantum_info.Operator: The operator corresponding to the Trotterized time-evolution unitary. \u0026#34;\u0026#34;\u0026#34; t = Parameter(\u0026#34;t\u0026#34;) qr = QuantumRegister(num_qubits) qc = QuantumCircuit(qr) for _ in range(trotter_steps): qc.append(Trot_qc(num_qubits, t), qr) qc = qc.bind_parameters({t: t_target/trotter_steps}) return qi.Operator(qc) Finally, we can plot how the Trotter error (= 1 - process fidelity) changes as we increase the number of Trotter steps.\nt_target = 0.5 # total time evolved U_target = U_tb(t_target) steps=np.arange(1,101,2) fidelities=[] for n in steps: U_trotter = U_trot_tb(t_target, n, 3) fidelity = qi.process_fidelity(U_trotter, target=U_target) fidelities.append(fidelity) plt.figure(facecolor=\u0026#39;white\u0026#39;) plt.loglog(steps, 1 - np.array(fidelities)) plt.ylabel(\u0026#39;Trotter error\u0026#39;) plt.xlabel(\u0026#39;Trotter steps\u0026#39;) plt.show() Here is how the plot looks like:\nYay 🎉! The trotter error decreases as the number of Trotter steps increases, suggesting that we have indeed implemented Trotterization correctly.\nSo here comes the end of the first part. In the next post, we will see how we can use the Trotterized quantum circuit that we just built to study phenomena including the quantum random walk and Anderson localization on a 1-D quantum chain. Stay tuned!\n","date":"June 4, 2022","permalink":"/blog/ibm-spring-challenge-1/","section":"Blog","summary":"A few weeks ago I participated in the IBM Quantum Spring Challenge 2022, which was a fun challenge to do because one of the topics covered is actually close to my heart, which is on quantum simulations of many-body systems in condensed matter physics.","title":"Quantum simulation of many-body physics - I"},{"content":" A quick peek at the shell interface. This weekend I spent some time tweaking the Terminal on my Mac with iTerm2 and Fish shell. Why did I do it? First of all, I have been quite fed up with the boring black-and-white look of the default Terminal app. In my opinion, the introduction of multiple colors together with glyphs/icons not only makes it look better visually, it also helps one distinguish different contents (e.g. directories, files) more easily. Moreover, I just want more customizations and features like autosuggestions to make working with command lines a little more efficient. So below are the ingredients I used to customize my Terminal and instructions for some key steps.\nIngredients: # iTerm2: A popular terminal emulator for macOS Colors: I personally use Solarized Dark Download Solarized Unzip and double click on the the color scheme Solarized Dark.itermcolors under the directory /iterm2-colors-solarized Open iTerm2\u0026rsquo;s Preferences → Profiles → Colors, and select the theme under Color Presets Text: We need one of the Nerd Fonts to render the glyphs/icons; I chose two of them Meslo Nerd Font: Downloaded from the Tide repo; this particular font contains all the glyphs needed Source Code Pro Nerd Font: Installed on Homebrew via brew tap homebrew/cask-fonts (only need to run this once) and then brew install --cask font-source-code-pro; This is the font I\u0026rsquo;d like to use in text Alternatively, all the Powerline Fonts can be installed based on this repo Go to iTerm2\u0026rsquo;s Preferences → Profiles → Text, under Font, choose Source Code Pro (for Powerline) or any font you like; select Use a different font for non-ASCII text, then choose MesloLGS NF under Non-ASCII Font I also resize the New Windows to be 120 columns and 40 rows under the Window panel Fish shell: A great alternative to bash and zsh Installation: brew install fish Set fish as the default shell: Add the shell to /etc/shells with echo /usr/local/bin/fish | sudo tee -a /etc/shells Change the default shell with chsh -s /usr/local/bin/fish Oh My Fish: Package manager for customizing the fish shell Check all the themes contained in Oh My Fish: omf theme I installed the Agnoster theme: omf install agnoster Apply the theme: omf theme agnoster Fisher: Plugin manager for fish See all the plugins and prompts here Exa: Replacement for ls Installation: brew install exa Customized ll and lla: Find fish config file (config.fish) in ~/.config/fish Add the following lines to the config file (I got this trick from the great Takuya Matsuyama): if type -q exa alias ll \u0026#34;exa -l -g --icons\u0026#34; alias lla \u0026#34;ll -a\u0026#34; end OK, there you go. I will update this post in the future if there are new elements added to my Terminal customization.\n","date":"May 8, 2022","permalink":"/blog/fish-shell-customization/","section":"Blog","summary":"A quick peek at the shell interface.","title":"Fish shell and customization"},{"content":" A Brief Bio # Welcome! My name is Ruihao Li (李瑞浩). I grew up in Guangdong, China. When I started my undergraduate study at The University of Sydney in 2013, I aspired to be a molecular biologist. I spent around 6 months at University of California San Diego (UCSD) as an exchange student when I was in my second year, after which my academic interest gradually shifted to high energy physics. In my final undergraduate year, I worked under the supervision of Dr. Michael Schmidt on a project about quantum corrections in left-right symmetric seesaw mechanisms, which are theoretical models for explaining neutrino masses. After graduation, I began to pursue my Ph.D. in physics at Case Western Reserve University (CWRU) in 2017. I spent the first two years working with Dr. Pavel Fileviez Perez on the theory of leptophobic dark matter models. Starting from 2019, I have been working with Dr. Shulei Zhang on charge and spin transport in topological quantum materials, especially topological semimetals. I make use of both analytical and numerical tools for my research, such as Mathematica, Python, Julia, etc. See my research for more details.\nSince late 2021, I have become more serious about one of my other passions, quantum computing. I am mainly interested in exploring quantum machine learning and optimizations in the noisy intermediate-scale quantum (NISQ) era. In Spring 2022 I took a graduate course on quantum computer (PHYS 486) at CWRU. I have also been actively involved in many events related to quantum computing, where I benefited a lot from getting exposed to cutting-edge research problems in both industry and academia, as well as interacting with experts and fellow students. Here are some of the highlights as of June 2022:\nI have become Qiskit-certified! I completed all the coding challenges in QHack 2022 hosted by Xanadu. I took part in the 24-hour QC Hack 2022 Hackathon and together with four other teammates, we built a prototype of the quantum snakes-and-ladders game and won one of the Honorable Mentions in the IBM Quantum Challenge. I completed the IBM Quantum Spring Challenge 2022, which I wrote a blog post about here. I was selected as one of the mentees for the Quantum Open Source Foundation (QOSF) Mentorship Program in March 2022. I am now working as a Quantum Algorithms Research Intern at Agnostiq. Other Interests # Huge fan of basketball, the NBA, and LeBron James. 👑 Avid cook from time to time. 🥘 Animal videos all day! 🐱 ","date":"January 1, 1","permalink":"/about/","section":"","summary":"A Brief Bio # Welcome!","title":"About"},{"content":"Title: Impact of the Fermi Arc Diversity on the Berry Curvature Dipole in Time Reversal Invariant Weyl Semimetals\nAuthors: Diego García Ovalle - Armando Pezo - Aurélien Manchon (Aix-Marseille Université, CNRS, CINaM, Marseille, France.)\nAbstract:\nWhereas anomalous Hall effect has been thought to only exist in materials presenting a net magnetization, such as ferro- or ferrimagnetic metals, recent progress has revealed that this is not the case. In particular, it has been recently proposed that in nonmagnetic crystals a transverse Hall current can develop at the second order in the electric field. This effect, tagged the nonlinear Hall effect, arises in certain non-centrosymmetric crystals and is driven by the Berry curvature dipole. Weyl Semimetals are particularly promising platforms for the observation of the nonlinear Hall effect because their bulk Fermi surface is composed of Weyl nodes with diverging Berry curvature. Nonetheless, Weyl Semimetals display another intriguing aspect that has remained scarcely addressed so far. Depending on the Weyl cone inclination, their surface feature a wide variety of trivial and non-trivial states, including Fermi pockets, arcs and track states.\nIn this work, adopting a model for noncentrosymmetric Weyl Semimetal, we investigate the impact of these surface states on the nonlinear Hall response. We show that depending on the slab geometry, surface states can have a dramatic impact on the nonlinear Hall effect, resulting in substantial thickness-dependence. We also extend our study to the realistic case of WTe2 thin film using a Wannier-projected tight-binding representation. Finally, we mention the intimate connection that is expected between the nonlinear Hall effect and the Orbital Edelstein Effect of these noncentrosymmetric materials.\n","date":"January 1, 1","permalink":"/journal-club/dgo_abstract/","section":"Journal Club","summary":"Title: Impact of the Fermi Arc Diversity on the Berry Curvature Dipole in Time Reversal Invariant Weyl Semimetals","title":"Journal Club"},{"content":" Some Weyl cones and Feynman diagrams. Overview # My current research focuses on the investigation of novel spin/charge transport phenomena in topological materials. Specifically, topological semimetals, such as Weyl and Dirac semimetals, are three-dimensional topological phases with gapless excitations. Due to the interplay of their unique topology and symmetries, they exhibit topologically protected boundary excitations\u0026mdash;Fermi arc states for Weyl semimetals and higher-order Fermi arc (HOFA) states for Dirac semimetals\u0026mdash;as well as interesting phenomena like the chiral anomaly, which manifests in novel transport responses such as the negative magnetoresistance and the nonlinear Hall effect proposed in one of our works. More details can be found in this review article.\nI have also worked on Dirac and Majorana dark matter models that establish a possible connection between baryon number violation and dark matter phenomenology. See publications below for more details.\nPublications # R.-H. Li, P. Shen, and S. S.-L. Zhang, Tunable spin-charge conversion in topological Dirac semimetals, APL Mater. 10, 041108 (2022). R.-H. Li, O. G. Heinonen, A. A. Burkov, and S. S.-L. Zhang, Nonlinear Hall effect in Weyl semimetals induced by chiral anomaly, Phys. Rev. B 103, 045105 (2021). P. Fileviez Perez, E. Golias, R.-H. Li, C. Murgui, and A. D. Plascencia, Anomaly-free dark matter models, Phys. Rev. D 100, 015017 (2019). P. Fileviez Perez, E. Golias, R.-H. Li, and C. Murgui, Leptophobic dark matter and the baryon number violation scale, Phys. Rev. D 99, 035009 (2019). Talks # Introduction to QAOA (2022) Talk given at the QOSF Mentorship Program meeting. Majorana Zero Modes in a Kitaev Chain (2022) Talk given at the CMP Journal Club at CWRU in Spring 2022. Tunable spin-charge conversion in topological Dirac semimetals (2022) 2022.3: APS March Meeting 2022, Chicago, IL, USA. 2021.8: The 2021 Around-the-Clock Around-the-Globe magnetics Conference (AtC-AtG), Virtual. Chiral-anomaly-induced nonlinear Hall effect in Weyl semimetals (2020) 2020.11: The 65th Annual Conference on Magnetism and Magnetic Materials (MMM 2020), Virtual. 2020.8: The 2020 Around-the-Clock Around-the-Globe magnetics Conference (AtC-AtG), Virtual. (Best Presentation Awards) Fantastic dark matter and where to find them: Indirect Detection (2019) Talk given at the CERCA Weekly Seminar in Spring 2019. Baryon number violation and leptophobic dark matter (2018) Talk given at the CERCA Weekly Seminar in Fall 2018. Quantum corrections in left-right symmetric seesaw mechanisms (2016) Talk given as my Honours year final presentation in Oct, 2016. Miscellaneous Notes # Quantum Field Theory in Curved Spacetime (2018). A short introduction to quantum field theory in curved spacetime. Introduction to Quantum Field Theory (2016). Lecture notes compiled based on the Honours course on Quantum Field Theory. Particle Cosmology and Baryonic Astrophysics (2016). Lecture notes compiled based on the Honours course on Particle Cosmology and Baryonic Astrophysics. ","date":"January 1, 1","permalink":"/research/","section":"","summary":"Some Weyl cones and Feynman diagrams.","title":"Research"}]