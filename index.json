[{"content":"A few weeks ago I participated in the IBM Quantum Spring Challenge 2022, which was a fun challenge to do because one of the topics covered is actually close to my heart, which is on quantum simulations of many-body systems in condensed matter physics. In these problems, we investigated a well-known phenomenon (to the condensed matter physics community, of course) called Anderson localization and one called many-body localization, which I happened to gain some exposure to during the MAGLAB Theory Winter School earlier this year and is still an active topic of research. I will split the full discussion into three parts. This blog post will cover the first part, where we will set up the framework for investigating many-body physics on a quantum computer. This includes building the tight-binding model for a 1D quantum chain and using Trotterization for simulating dynamics of the quantum states.\nThe other topic of the Quantum Challenge was quantum chemistry calculations with the variational quantum eigensolver (VQE), which I do not intend to discuss this time. Interested readers are encouraged to take a look at the original announcement linked above for more details. Here is the official Github repository if you want to have a go at the challenge problems. Without further ado, let us begin our discussion.\nTight-binding model of a quantum chain # The tight-binding model would be the building block for studying the many-body physics that will be discussed throughout this post. In layman\u0026rsquo;s terms, the tight-binding model describes a solid-state system where most electrons are \u0026ldquo;tightly bound\u0026rdquo; to their nuclei, which sit at the fixed lattice sites. Only a few valence electrons are loosely bound and therefore can \u0026ldquo;hop\u0026rdquo; to the neighboring sites. This hopping action is what leads to an extended Bloch wavefunction, which is the electron wavefunction in the presence of a period lattice potential. The most common way of writing a (spinless) tight-binding model in condensed matter physics would be in the second-quantization form:\n\\begin{equation} H_\\text{tb}/\\hbar = \\sum_{i}\\epsilon_{i} c_i^\\dagger c_i + \\sum_{\\langle i,j\\rangle}J_{ij}\\left( c_i^\\dagger c_j + \\text{h.c.}\\right), \\end{equation}\nwhere \\(c_i^\\dagger\\) and \\(c_i\\) are the creation and annihilation operators for the electron at site \\(i\\), respectively, \\(\\mu_i\\) are the on-site potentials, and \\(J_{ij}\\) are elements of a symmetric matrix representing the hopping strengths. Moreover, \\(\\langle i,j\\rangle\\) denotes any two neighboring sites. To simulate this fermionic system on a gate-based quantum computer which is built on qubits, we need a similar notion for the ladder operators (i.e., creation and annihilation operators) for two-level systems: \\(c^\\dagger \\ket{0} \\to \\ket{1}\\) and \\(c\\ket{1} \\to \\ket{0}\\). One way of representing them would be to use the Pauli gates:\n$$ \\begin{split} \u0026amp; c_i^\\dagger = \\frac{1}{\\sqrt 2}(X_i + iY_i), \\\\ \u0026amp; c_i = \\frac{1}{\\sqrt 2}(X_i - iY_i). \\end{split} $$\nPlugging them into Eq. (1) and assuming the hoppings are homogeneous such that they can be described by a single parameter \\(J\\), we obtain\n\\begin{equation} H_\\text{tb}/\\hbar = \\sum_i \\epsilon_i Z_i + J\\sum_{\\langle i,j\\rangle}(X_i X_j + Y_i Y_j), \\end{equation} where we have neglected a constant term (proportional to the identity operator) that is would not have any impact on the dynamics of the system.\nTrotterization # One of the things we care about in quantum simulations is the time-evolution of the quantum system. This is determined by the unitary operator \\(e^{-iHt/\\hbar}\\) in quantum mechanics, where \\(H\\) is the time-independent Hamiltonian, which is \\(H_\\text{tb}\\) in the case of our 1D quantum chain. Now, to execute the time evolution unitary on a gate-based quantum computer, one must decompose it into a product of one- and two-qubit gates that can be implemented on the quantum computer. One method to accomplish this is called Trotterization, which essentially performs a discretized approximation to the continuous time evolution. To demonstrate it, let us consider a simple three-site system. The time-evolution unitary of this system is given by $$ \\begin{split} U_\\text{tb}(t) \u0026amp;= \\exp\\left[\\frac{-it}{\\hbar}\\left(H_\\text{tb}^{(0,1)} + H_\\text{tb}^{(1,2)}\\right)\\right] \\\\ \u0026amp;\\approx \\left[\\exp\\left(\\frac{-it}{n\\hbar}H_\\text{tb}^{(0,1)}\\right) \\exp\\left(\\frac{-it}{n\\hbar}H_\\text{tb}^{(1,2)}\\right) \\right]^n, \\end{split} $$ where in the second step we have applied Trotterization and \\(n\\) is the number of Trotter steps, i.e., discrete time steps. Within each two-site subsystem, the Pauli operator pairs \\(X_i X_j\\) and \\(Y_i Y_j\\) commute with each other. Therefore, with \\(J = 1\\) and \\(\\epsilon_i = 0\\), we can write \\(U_\\text{tb}(t)\\) as $$ \\begin{split} U_\\text{tb}(t) \u0026amp;\\approx \\left\\{\\exp\\left[\\frac{-it}{n} \\left(X_0 X_1 + Y_0 Y_1 \\right) \\right] \\exp\\left[\\frac{-it}{n}\\left(X_1 X_2 + Y_1 Y_2 \\right) \\right] \\right\\}^n \\\\ \u0026amp;= \\left[\\exp\\left(\\frac{-it}{n}X_0 X_1\\right) \\exp\\left(\\frac{-it}{n}Y_0 Y_1\\right) \\exp\\left(\\frac{-it}{n}X_1 X_2\\right) \\exp\\left(\\frac{-it}{n}Y_1 Y_2\\right) \\right]^n \\\\ \u0026amp;= \\left[R_{X_0X_1}\\left(\\frac{2t}{n} \\right) R_{Y_0Y_1}\\left(\\frac{2t}{n} \\right) R_{X_1X_2}\\left(\\frac{2t}{n} \\right) R_{Y_1Y_2}\\left(\\frac{2t}{n} \\right) \\right]^n, \\end{split} $$ where \\(R_{X_iX_j}\\) and \\(R_{Y_iY_j}\\) are parametric two-qubit \\(X\\otimes X\\) and \\(Y\\otimes Y\\) interaction gates between qubits \\(i\\) and \\(j\\). They are sometimes referred to as the Ising gates. Please see RXXGate and RYYGate for more details. In general, for an \\(n\\)-qubit system, the time-evolution unitary can be written as $$ U_\\text{tb}(\\Delta t) \\approx \\prod_{j\\in\\text{odd}} R_{X_j X_{j+1}}(2\\Delta t) R_{Y_j Y_{j+1}}(2\\Delta t) \\prod_{k\\in\\text{even}} R_{X_k X_{k+1}}(2\\Delta t) R_{Y_k Y_{k+1}}(2\\Delta t), $$ where \\(\\Delta t = t/n\\) is the discretized time step.\nWe are now just one step shy of implementing \\(U_\\text{tb}(t)\\) on a quantum computer, that is, to further decompose the \\(R_{XX}\\) and \\(R_{YY}\\) gates into a set of gates that are native to the quantum hardware, such as the CNOT gate and single-qubit rotation gates. For this, let us introduce another Ising gate, RZZGate \\(R_{ZZ}\\). It is not hard to verify that this two-qubit gate can be decomposed as a single-qubit rotation gate \\(R_Z = \\exp(-i\\theta Z/2)\\) sandwiched between two CNOT gates. Specifically, \\(R_{ZZ}(\\theta) = \\text{CNOT}\\, R_Z(\\theta)\\, \\text{CNOT}\\). Then by working out the explicit matrix representations, one can show that the \\(R_{XX}\\) gate has the following decomposition,\nwhile the \\(R_{YY}\\) gate is decomposed as\nWith the above setup, we are ready to build the Trotterized quantum circuit for a general \\(n\\)-site quantum chain using Qiskit. First, we need to import some necessary packages.\nimport numpy as np import matplotlib.pyplot as plt from qiskit import QuantumCircuit, QuantumRegister from qiskit.providers.aer import QasmSimulator from qiskit.circuit import Parameter import qiskit.quantum_info as qi We then define the Trot_qc function for the Trotterized quantum circuit.\ndef Trot_qc(num_qubits, t=Parameter(\u0026#34;t\u0026#34;)): \u0026#34;\u0026#34;\u0026#34; Creates the Trotterized quantum circuit at a given time step for a 1D tight-binding model. Args: t (float): The Trotter parameter. num_qubits (int): The number of qubits in the circuit. Returns: qiskit.circuit.QuantumCircuit: The Trotterized quantum circuit. \u0026#34;\u0026#34;\u0026#34; def ZZ_gate(t): ZZ_qr = QuantumRegister(2) ZZ_qc = QuantumCircuit(ZZ_qr, name=\u0026#39;ZZ\u0026#39;) ZZ_qc.cnot(0,1) ZZ_qc.rz(2 * t, 1) ZZ_qc.cnot(0,1) # Convert custom quantum circuit into a gate ZZ = ZZ_qc.to_instruction() return ZZ def XX_gate(t): XX_qr = QuantumRegister(2) XX_qc = QuantumCircuit(XX_qr, name=\u0026#39;XX\u0026#39;) XX_qc.ry(np.pi/2, [0,1]) XX_qc.append(ZZ_gate(t), [0,1]) XX_qc.ry(-np.pi/2, [0,1]) XX = XX_qc.to_instruction() return XX def YY_gate(t): YY_qr = QuantumRegister(2) YY_qc = QuantumCircuit(YY_qr, name=\u0026#39;YY\u0026#39;) YY_qc.rx(-np.pi/2, [0,1]) YY_qc.append(ZZ_gate(t), [0,1]) YY_qc.rx(np.pi/2, [0,1]) YY = YY_qc.to_instruction() return YY Trot_qr = QuantumRegister(num_qubits) qc = QuantumCircuit(Trot_qr, name=\u0026#39;Trot\u0026#39;) for i in range(num_qubits - 1): qc.append(XX_gate(t), [Trot_qr[i], Trot_qr[i+1]]) qc.append(YY_gate(t), [Trot_qr[i], Trot_qr[i+1]]) return qc We can inspect the circuit for 3 qubits by calling the QuantumCircuit.draw() method:\nLast but not least, to see if we have implemented Trotterization correctly, we may compute the process fidelity between the Trotterized quantum channel and the exact time-evolution unitary. We define the exact time-evolution unitary as follows:\nfrom qiskit.opflow import I, X, Y, Z def U_tb(t): \u0026#34;\u0026#34;\u0026#34;Time-evolution unitary for 3 qubits.\u0026#34;\u0026#34;\u0026#34; # Interactions (I is the identity matrix; X and Y are Pauli matricies; # ^ is a tensor product) XXs = (I^X^X) + (X^X^I) YYs = (I^Y^Y) + (Y^Y^I) H_tb = XXs + YYs return (t * H_tb).exp_i() On the other hand, the approximate unitary based on Trotterization is constructed as follows:\ndef U_trot_tb(t_target, trotter_steps, num_qubits): \u0026#34;\u0026#34;\u0026#34; Creates the Trotterized time-evolution unitary for a 1D tight-binding model. Args: t_target (float): The total time evolved. trotter_steps (int): The number of Trotter steps. num_qubits (int): The number of qubits in the circuit. Returns: qiskit.quantum_info.Operator: The operator corresponding to the Trotterized time-evolution unitary. \u0026#34;\u0026#34;\u0026#34; t = Parameter(\u0026#34;t\u0026#34;) qr = QuantumRegister(num_qubits) qc = QuantumCircuit(qr) for _ in range(trotter_steps): qc.append(Trot_qc(num_qubits, t), qr) qc = qc.bind_parameters({t: t_target/trotter_steps}) return qi.Operator(qc) Finally, we can plot how the Trotter error (= 1 - process fidelity) changes as we increase the number of Trotter steps.\nt_target = 0.5 # total time evolved U_target = U_tb(t_target) steps=np.arange(1,101,2) fidelities=[] for n in steps: U_trotter = U_trot_tb(t_target, n, 3) fidelity = qi.process_fidelity(U_trotter, target=U_target) fidelities.append(fidelity) plt.figure(facecolor=\u0026#39;white\u0026#39;) plt.loglog(steps, 1 - np.array(fidelities)) plt.ylabel(\u0026#39;Trotter error\u0026#39;) plt.xlabel(\u0026#39;Trotter steps\u0026#39;) plt.show() Here is how the plot looks like:\nYay 🎉! The trotter error decreases as the number of Trotter steps increases, suggesting that we have indeed implemented Trotterization correctly.\nSo here comes the end of the first part. In the next post, we will see how we can use the Trotterized quantum circuit that we just built to study phenomena including the quantum random walk and Anderson localization on a 1D quantum chain. Stay tuned!\n","date":"June 3, 2022","permalink":"/blog/ibm-spring-challenge-1/","section":"Blog","summary":"A few weeks ago I participated in the IBM Quantum Spring Challenge 2022, which was a fun challenge to do because one of the topics covered is actually close to my heart, which is on quantum simulations of many-body systems in condensed matter physics.","title":"Quantum simulation of many-body physics - I"},{"content":" A quick peek at the shell interface. This weekend I spent some time tweaking the Terminal on my Mac with iTerm2 and Fish shell. Why did I do it? First of all, I have been quite fed up with the boring black-and-white look of the default Terminal app. In my opinion, the introduction of multiple colors together with glyphs/icons not only makes it look better visually, it also helps one distinguish different contents (e.g. directories, files) more easily. Moreover, I just want more customizations and features like autosuggestions to make working with command lines a little more efficient. So below are the ingredients I used to customize my Terminal and instructions for some key steps.\nIngredients: # iTerm2: A popular terminal emulator for macOS Colors: I personally use Solarized Dark Download Solarized Unzip and double click on the the color scheme Solarized Dark.itermcolors under the directory /iterm2-colors-solarized Open iTerm2\u0026rsquo;s Preferences → Profiles → Colors, and select the theme under Color Presets Text: We need one of the Nerd Fonts to render the glyphs/icons; I chose two of them Meslo Nerd Font: Downloaded from the Tide repo; this particular font contains all the glyphs needed Source Code Pro Nerd Font: Installed on Homebrew via brew tap homebrew/cask-fonts (only need to run this once) and then brew install --cask font-source-code-pro; This is the font I\u0026rsquo;d like to use in text Alternatively, all the Powerline Fonts can be installed based on this repo Go to iTerm2\u0026rsquo;s Preferences → Profiles → Text, under Font, choose Source Code Pro (for Powerline) or any font you like; select Use a different font for non-ASCII text, then choose MesloLGS NF under Non-ASCII Font I also resize the New Windows to be 120 columns and 40 rows under the Window panel Fish shell: A great alternative to bash and zsh Installation: brew install fish Set fish as the default shell: Add the shell to /etc/shells with echo /usr/local/bin/fish | sudo tee -a /etc/shells Change the default shell with chsh -s /usr/local/bin/fish Oh My Fish: Package manager for customizing the fish shell Check all the themes contained in Oh My Fish: omf theme I installed the Agnoster theme: omf install agnoster Apply the theme: omf theme agnoster Fisher: Plugin manager for fish See all the plugins and prompts here Exa: Replacement for ls Installation: brew install exa Customized ll and lla: Find fish config file (config.fish) in ~/.config/fish Add the following lines to the config file (I got this trick from the great Takuya Matsuyama): if type -q exa alias ll \u0026#34;exa -l -g --icons\u0026#34; alias lla \u0026#34;ll -a\u0026#34; end OK, there you go. I will update this post in the future if there are new elements added to my Terminal customization.\n","date":"May 8, 2022","permalink":"/blog/fish-shell-customization/","section":"Blog","summary":"A quick peek at the shell interface.","title":"Fish shell and customization"},{"content":" A Brief Bio # Welcome! My name is Ruihao Li (李瑞浩). I grew up in Guangdong, China. When I started my undergraduate study at The University of Sydney in 2013, I aspired to be a molecular biologist. I spent around 6 months at University of California San Diego (UCSD) as an exchange student when I was in my second year, after which my academic interest gradually shifted to high energy physics. In my final undergraduate year, I worked under the supervision of Dr. Michael Schmidt on a project about quantum corrections in left-right symmetric seesaw mechanisms, which are theoretical models for explaining neutrino masses. After graduation, I began to pursue my Ph.D. in physics at Case Western Reserve University (CWRU) in 2017. I spent the first two years working with Dr. Pavel Fileviez Perez on the theory of leptophobic dark matter models. Starting from 2019, I have been working with Dr. Shulei Zhang on charge and spin transport in topological quantum materials, especially topological semimetals. I make use of both analytical and numerical tools for my research, such as Mathematica, Python, Julia, etc. See my research for more details.\nSince late 2021, I have become more serious about one of my other passions, quantum computing. I am mainly interested in exploring quantum machine learning and optimizations in the noisy intermediate-scale quantum (NISQ) era. In Spring 2022 I took a graduate course on quantum computer (PHYS 486) at CWRU. I have also been actively participating in many events related to quantum computing, where I benefited a lot from getting exposed to cutting-edge research problems in both industry and academia, as well as interacting with experts and fellow students. Here are some of the highlights as of June 2022:\nI have become Qiskit-certified! I completed all the coding challenges in QHack 2022 hosted by Xanadu. I took part in the 24-hour QCHack 2022 Hackathon and together with four other teammates, we built a prototype of the quantum snakes-and-ladders game and won one of the Honorable Mentions in the IBM Quantum Challenge. I completed the IBM Quantum Spring Challenge 2022, which I wrote a blog post about here. I was selected as one of the mentees for the Quantum Open Source Foundation (QOSF) Mentorship Program in March 2022. I am now working as a Quantum Algorithms Research Intern at Agnostiq. Other Interests # Huge fan of basketball, the NBA, and LeBron James. 👑 Avid cook from time to time. 🥘 Animal videos all day! 🐱 ","date":"January 1, 1","permalink":"/about/","section":"","summary":"A Brief Bio # Welcome!","title":"About"},{"content":"Title: Impact of the Fermi Arc Diversity on the Berry Curvature Dipole in Time Reversal Invariant Weyl Semimetals\nAuthors: Diego García Ovalle - Armando Pezo - Aurélien Manchon (Aix-Marseille Université, CNRS, CINaM, Marseille, France.)\nAbstract:\nWhereas anomalous Hall effect has been thought to only exist in materials presenting a net magnetization, such as ferro- or ferrimagnetic metals, recent progress has revealed that this is not the case. In particular, it has been recently proposed that in nonmagnetic crystals a transverse Hall current can develop at the second order in the electric field. This effect, tagged the nonlinear Hall effect, arises in certain non-centrosymmetric crystals and is driven by the Berry curvature dipole. Weyl Semimetals are particularly promising platforms for the observation of the nonlinear Hall effect because their bulk Fermi surface is composed of Weyl nodes with diverging Berry curvature. Nonetheless, Weyl Semimetals display another intriguing aspect that has remained scarcely addressed so far. Depending on the Weyl cone inclination, their surface feature a wide variety of trivial and non-trivial states, including Fermi pockets, arcs and track states.\nIn this work, adopting a model for noncentrosymmetric Weyl Semimetal, we investigate the impact of these surface states on the nonlinear Hall response. We show that depending on the slab geometry, surface states can have a dramatic impact on the nonlinear Hall effect, resulting in substantial thickness-dependence. We also extend our study to the realistic case of WTe2 thin film using a Wannier-projected tight-binding representation. Finally, we mention the intimate connection that is expected between the nonlinear Hall effect and the Orbital Edelstein Effect of these noncentrosymmetric materials.\n","date":"January 1, 1","permalink":"/journal-club/dgo_abstract/","section":"Journal Club","summary":"Title: Impact of the Fermi Arc Diversity on the Berry Curvature Dipole in Time Reversal Invariant Weyl Semimetals","title":"Journal Club"},{"content":" Some Weyl cones and Feynman diagrams. Overview # My current research focuses on the investigation of novel spin/charge transport phenomena in topological materials. Specifically, topological semimetals, such as Weyl and Dirac semimetals, are three-dimensional topological phases with gapless excitations. Due to the interplay of their unique topology and symmetries, they exhibit topologically protected boundary excitations\u0026mdash;Fermi arc states for Weyl semimetals and higher-order Fermi arc (HOFA) states for Dirac semimetals\u0026mdash;as well as interesting phenomena like the chiral anomaly, which manifests in novel transport responses such as the negative magnetoresistance and the nonlinear Hall effect proposed in one of our works. More details can be found in this review article.\nI have also worked on Dirac and Majorana dark matter models that establish a possible connection between baryon number violation and dark matter phenomenology. See publications below for more details.\nPublications # R.-H. Li, P. Shen, and S. S.-L. Zhang, Tunable spin-charge conversion in topological Dirac semimetals, APL Mater. 10, 041108 (2022). R.-H. Li, O. G. Heinonen, A. A. Burkov, and S. S.-L. Zhang, Nonlinear Hall effect in Weyl semimetals induced by chiral anomaly, Phys. Rev. B 103, 045105 (2021). P. Fileviez Perez, E. Golias, R.-H. Li, C. Murgui, and A. D. Plascencia, Anomaly-free dark matter models, Phys. Rev. D 100, 015017 (2019). P. Fileviez Perez, E. Golias, R.-H. Li, and C. Murgui, Leptophobic dark matter and the baryon number violation scale, Phys. Rev. D 99, 035009 (2019). Talks # Introduction to QAOA (2022) Talk given at the QOSF Mentorship Program meeting. Majorana Zero Modes in a Kitaev Chain (2022) Talk given at the CMP Journal Club at CWRU in Spring 2022. Tunable spin-charge conversion in topological Dirac semimetals (2022) 2022.3: APS March Meeting 2022, Chicago, IL, USA. 2021.8: The 2021 Around-the-Clock Around-the-Globe magnetics Conference (AtC-AtG), Virtual. Chiral-anomaly-induced nonlinear Hall effect in Weyl semimetals (2020) 2020.11: The 65th Annual Conference on Magnetism and Magnetic Materials (MMM 2020), Virtual. 2020.8: The 2020 Around-the-Clock Around-the-Globe magnetics Conference (AtC-AtG), Virtual. (Best Presentation Awards) Fantastic dark matter and where to find them: Indirect Detection (2019) Talk given at the CERCA Weekly Seminar in Spring 2019. Baryon number violation and leptophobic dark matter (2018) Talk given at the CERCA Weekly Seminar in Fall 2018. Quantum corrections in left-right symmetric seesaw mechanisms (2016) Talk given as my Honours year final presentation in Oct, 2016. Miscellaneous Notes # Quantum Field Theory in Curved Spacetime (2018). A short introduction to quantum field theory in curved spacetime. Introduction to Quantum Field Theory (2016). Lecture notes compiled based on the Honours course on Quantum Field Theory. Particle Cosmology and Baryonic Astrophysics (2016). Lecture notes compiled based on the Honours course on Particle Cosmology and Baryonic Astrophysics. ","date":"January 1, 1","permalink":"/research/","section":"","summary":"Some Weyl cones and Feynman diagrams.","title":"Research"}]